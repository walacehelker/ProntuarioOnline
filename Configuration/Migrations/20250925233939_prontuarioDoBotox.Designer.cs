// <auto-generated />
using System;
using Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Configuration.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925233939_prontuarioDoBotox")]
    partial class prontuarioDoBotox
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Cadastro.CadPessoa", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("cidade");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_insercao");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("estado");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("excluido");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("excluido_em");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<string>("NomeSocial")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome_social");

                    b.Property<int?>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<byte[]>("PdfAssinado")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("pdf_assinado");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("rua");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("cad_pessoas", (string)null);
                });

            modelBuilder.Entity("Domain.Cadastro.CadPessoaHistorico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AlergiaOvo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("alergia_ovo");

                    b.Property<string>("Alergias")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("alergias");

                    b.Property<bool>("Aminoglicosideos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("aminoglicosideos");

                    b.Property<bool>("Analgesico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("analgesico");

                    b.Property<bool>("Ansiedade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("ansiedade");

                    b.Property<bool>("AntecedentesAlergicos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("antecedentes_alergicos");

                    b.Property<string>("AntecedentesFamiliares")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("antecedentes_familiares");

                    b.Property<string>("AntecedentesPatologicos")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("antecedentes_patologicos");

                    b.Property<bool>("AntiInfamatorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("anti_inflamatorio");

                    b.Property<bool>("Antibiotico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("antibiotico");

                    b.Property<bool>("BloqueadorCanalCalcio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("bloqueador_canal_cacio");

                    b.Property<bool>("CuidadosEstéticos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("cuidados_esteticos");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoCuidadosEsteticos")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("descricao_cuidados_esteticos");

                    b.Property<string>("DescricaoTratamentoMedico")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("descricao_tratamento_medico");

                    b.Property<string>("DescricaoTratamentosortomolecular")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("descricao_tratamentos_ortomolecular");

                    b.Property<bool>("Diabetes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("diabetes");

                    b.Property<string>("DiagnosticoClinico")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("diagnostico_clinico");

                    b.Property<string>("Esportes")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("esportes");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Fumante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fumante");

                    b.Property<bool>("GestanteOuAmamentando")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("gestante_ou_amamentando");

                    b.Property<string>("InformacoesComplementares")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("informacoes_complementares");

                    b.Property<string>("InformacoesPosAplicacao")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("informacoes_pos_aplicacao");

                    b.Property<string>("InformacoesSobreAplicacao")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("informacoes_sobre_aplicacao");

                    b.Property<bool>("IntoleranciaLactose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("intolerante_lactose");

                    b.Property<bool>("Medicamentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("medicamentos");

                    b.Property<string>("OutrosDisturbiosEmocionais")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("outros_disturbios_emocionais");

                    b.Property<string>("OutrosMedicamentos")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("outros_medicamentos");

                    b.Property<bool>("Penicilaminas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("penicilaminas");

                    b.Property<string>("PessoaId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_pessoa");

                    b.Property<bool>("PossuiTratamentoEsteticoAnterior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("possui_tratamento_estetico_anterior");

                    b.Property<bool>("PraticaEsporte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("pratica_esporte");

                    b.Property<bool>("Preenchedores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("preenchedores");

                    b.Property<bool>("ProblemaCardiaco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("problema_cardiaco");

                    b.Property<string>("QualAcido")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("qual_acido");

                    b.Property<string>("QualProblemaCardiaco")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("qual_problema_cardiaco");

                    b.Property<string>("Queixa")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("queixa");

                    b.Property<bool>("Quinolonas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("quinolonas");

                    b.Property<bool>("RelaxanteMuscular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("relaxante_muscular");

                    b.Property<bool>("RepositoresHormonais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("repositores_hormonais");

                    b.Property<bool>("Stresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("stresse");

                    b.Property<bool>("Succinilcolina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("succinilcolina");

                    b.Property<bool>("TomaSol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("toma_sol");

                    b.Property<bool>("ToxinixaBotulinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("toxinia_botulinica");

                    b.Property<string>("TratamentoEsteticoAnterior")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tratamento_estetico_anterior");

                    b.Property<bool>("TratamentoMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("tratamento_medico");

                    b.Property<bool>("TratamentoOrtomolecular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("tratamento_ortomolecular");

                    b.Property<bool>("UsoAcidoPele")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("uso_acido_pele");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("cad_pessoas_historicos", (string)null);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Prontuarios.PtBotox", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id");

                    b.Property<decimal?>("CorrugadorDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("corrugador_direito");

                    b.Property<decimal?>("CorrugadorEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("corrugador_esquerdo");

                    b.Property<DateTime?>("DataDiluicao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_diluicao");

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_insercao");

                    b.Property<DateTime>("DataProcedimento")
                        .HasColumnType("datetime")
                        .HasColumnName("data_procedimento");

                    b.Property<DateTime?>("DataValidade")
                        .HasColumnType("datetime")
                        .HasColumnName("data_validade");

                    b.Property<decimal?>("DepressorAnguloBocaDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("depressor_angulo_boca_direito");

                    b.Property<decimal?>("DepressorAnguloBocaEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("depressor_angulo_boca_esquerdo");

                    b.Property<decimal?>("DepressorLabioInferiorDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("depressor_labio_inferior_direito");

                    b.Property<decimal?>("DepressorLabioInferiorEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("depressor_labio_inferior_esquerdo");

                    b.Property<decimal?>("DepressorSeptoNasal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("depressor_septo_nasal");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("excluido");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("excluido_em");

                    b.Property<decimal?>("Frontal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("frontal");

                    b.Property<decimal?>("LLabioSupAsaNarizDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("levantador_labio_superior_asa_nariz_direita");

                    b.Property<decimal?>("LLabioSupAsaNarizEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("levantador_labio_superior_asa_nariz_esquerdo");

                    b.Property<decimal?>("LevantadorLabioSuperiorDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("levantador_labio_superior_direito");

                    b.Property<decimal?>("LevantadorLabioSuperiorEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("levantador_labio_superior_esquerdo");

                    b.Property<string>("MarcaProduto")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("marca_produto");

                    b.Property<decimal?>("MassesterDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("masseter_direito");

                    b.Property<decimal?>("MassesterEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("masseter_esquerdo");

                    b.Property<decimal?>("MentonianoDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("mentoniano_direito");

                    b.Property<decimal?>("MentonianoEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("mentoniano_esquerdo");

                    b.Property<decimal?>("Nasal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("nasal");

                    b.Property<string>("NumeroLote")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("numero_lote");

                    b.Property<decimal?>("OrbicularBoca")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("orbicular_boca");

                    b.Property<decimal?>("OrbicularOlhoDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("orbicular_olho_direito");

                    b.Property<decimal?>("OrbicularOlhoEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("orbicular_olho_esquerdo");

                    b.Property<string>("PessoaId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_pessoa");

                    b.Property<decimal?>("PlatismaDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("platisma_direito");

                    b.Property<decimal?>("PlatismaEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("platisma_esquerdo");

                    b.Property<decimal?>("Procero")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("procero");

                    b.Property<decimal?>("RisorioDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("risorio_direito");

                    b.Property<decimal?>("RisorioEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("risorio_esquerdo");

                    b.Property<decimal?>("TotalUtilizado")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_utilizado");

                    b.Property<decimal?>("VolumeDiluicao")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("volume_diluicao");

                    b.Property<decimal?>("ZigomaticoMaiorDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("zigomatico_maior_direito");

                    b.Property<decimal?>("ZigomaticoMaiorEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("zigomatico_maior_esquerdo");

                    b.Property<decimal?>("ZigomaticoMenorDireito")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("zigomatico_menor_direito");

                    b.Property<decimal?>("ZigomaticoMenorEsquerdo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("zigomatico_menor_esquerdo");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("pt_botox", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Cadastro.CadPessoaHistorico", b =>
                {
                    b.HasOne("Domain.Cadastro.CadPessoa", "CadPessoa")
                        .WithMany("CadPessoaHistoricoList")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadPessoa");
                });

            modelBuilder.Entity("Domain.Prontuarios.PtBotox", b =>
                {
                    b.HasOne("Domain.Cadastro.CadPessoa", "CadPessoa")
                        .WithMany("PtBotoxList")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadPessoa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Cadastro.CadPessoa", b =>
                {
                    b.Navigation("CadPessoaHistoricoList");

                    b.Navigation("PtBotoxList");
                });
#pragma warning restore 612, 618
        }
    }
}
